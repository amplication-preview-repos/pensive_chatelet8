/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SizeRecommendation } from "./SizeRecommendation";
import { SizeRecommendationCountArgs } from "./SizeRecommendationCountArgs";
import { SizeRecommendationFindManyArgs } from "./SizeRecommendationFindManyArgs";
import { SizeRecommendationFindUniqueArgs } from "./SizeRecommendationFindUniqueArgs";
import { CreateSizeRecommendationArgs } from "./CreateSizeRecommendationArgs";
import { UpdateSizeRecommendationArgs } from "./UpdateSizeRecommendationArgs";
import { DeleteSizeRecommendationArgs } from "./DeleteSizeRecommendationArgs";
import { SizeRecommendationService } from "../sizeRecommendation.service";
@graphql.Resolver(() => SizeRecommendation)
export class SizeRecommendationResolverBase {
  constructor(protected readonly service: SizeRecommendationService) {}

  async _sizeRecommendationsMeta(
    @graphql.Args() args: SizeRecommendationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SizeRecommendation])
  async sizeRecommendations(
    @graphql.Args() args: SizeRecommendationFindManyArgs
  ): Promise<SizeRecommendation[]> {
    return this.service.sizeRecommendations(args);
  }

  @graphql.Query(() => SizeRecommendation, { nullable: true })
  async sizeRecommendation(
    @graphql.Args() args: SizeRecommendationFindUniqueArgs
  ): Promise<SizeRecommendation | null> {
    const result = await this.service.sizeRecommendation(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SizeRecommendation)
  async createSizeRecommendation(
    @graphql.Args() args: CreateSizeRecommendationArgs
  ): Promise<SizeRecommendation> {
    return await this.service.createSizeRecommendation({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => SizeRecommendation)
  async updateSizeRecommendation(
    @graphql.Args() args: UpdateSizeRecommendationArgs
  ): Promise<SizeRecommendation | null> {
    try {
      return await this.service.updateSizeRecommendation({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SizeRecommendation)
  async deleteSizeRecommendation(
    @graphql.Args() args: DeleteSizeRecommendationArgs
  ): Promise<SizeRecommendation | null> {
    try {
      return await this.service.deleteSizeRecommendation(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => SizeRecommendation)
  async FetchSizeRecommendation(
    @graphql.Args()
    args: SizeRecommendationFindUniqueArgs
  ): Promise<SizeRecommendation> {
    return this.service.FetchSizeRecommendation(args);
  }

  @graphql.Query(() => String)
  async GetSizeRecommendation(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetSizeRecommendation(args);
  }
}
