/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SizeRecommendation as PrismaSizeRecommendation,
} from "@prisma/client";
import { SizeRecommendationFindUniqueArgs } from "./SizeRecommendationFindUniqueArgs";
import { SizeRecommendation } from "./SizeRecommendation";

export class SizeRecommendationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SizeRecommendationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sizeRecommendation.count(args);
  }

  async sizeRecommendations(
    args: Prisma.SizeRecommendationFindManyArgs
  ): Promise<PrismaSizeRecommendation[]> {
    return this.prisma.sizeRecommendation.findMany(args);
  }
  async sizeRecommendation(
    args: Prisma.SizeRecommendationFindUniqueArgs
  ): Promise<PrismaSizeRecommendation | null> {
    return this.prisma.sizeRecommendation.findUnique(args);
  }
  async createSizeRecommendation(
    args: Prisma.SizeRecommendationCreateArgs
  ): Promise<PrismaSizeRecommendation> {
    return this.prisma.sizeRecommendation.create(args);
  }
  async updateSizeRecommendation(
    args: Prisma.SizeRecommendationUpdateArgs
  ): Promise<PrismaSizeRecommendation> {
    return this.prisma.sizeRecommendation.update(args);
  }
  async deleteSizeRecommendation(
    args: Prisma.SizeRecommendationDeleteArgs
  ): Promise<PrismaSizeRecommendation> {
    return this.prisma.sizeRecommendation.delete(args);
  }
  async FetchSizeRecommendation(
    args: SizeRecommendationFindUniqueArgs
  ): Promise<SizeRecommendation> {
    throw new Error("Not implemented");
  }
  async GetSizeRecommendation(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
}
