/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SizeRecommendationService } from "../sizeRecommendation.service";
import { SizeRecommendationCreateInput } from "./SizeRecommendationCreateInput";
import { SizeRecommendation } from "./SizeRecommendation";
import { SizeRecommendationFindManyArgs } from "./SizeRecommendationFindManyArgs";
import { SizeRecommendationWhereUniqueInput } from "./SizeRecommendationWhereUniqueInput";
import { SizeRecommendationUpdateInput } from "./SizeRecommendationUpdateInput";

export class SizeRecommendationControllerBase {
  constructor(protected readonly service: SizeRecommendationService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SizeRecommendation })
  async createSizeRecommendation(
    @common.Body() data: SizeRecommendationCreateInput
  ): Promise<SizeRecommendation> {
    return await this.service.createSizeRecommendation({
      data: data,
      select: {
        clothingItem: true,
        createdAt: true,
        id: true,
        recommendedSize: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SizeRecommendation] })
  @ApiNestedQuery(SizeRecommendationFindManyArgs)
  async sizeRecommendations(
    @common.Req() request: Request
  ): Promise<SizeRecommendation[]> {
    const args = plainToClass(SizeRecommendationFindManyArgs, request.query);
    return this.service.sizeRecommendations({
      ...args,
      select: {
        clothingItem: true,
        createdAt: true,
        id: true,
        recommendedSize: true,
        updatedAt: true,
        user: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SizeRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async sizeRecommendation(
    @common.Param() params: SizeRecommendationWhereUniqueInput
  ): Promise<SizeRecommendation | null> {
    const result = await this.service.sizeRecommendation({
      where: params,
      select: {
        clothingItem: true,
        createdAt: true,
        id: true,
        recommendedSize: true,
        updatedAt: true,
        user: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SizeRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSizeRecommendation(
    @common.Param() params: SizeRecommendationWhereUniqueInput,
    @common.Body() data: SizeRecommendationUpdateInput
  ): Promise<SizeRecommendation | null> {
    try {
      return await this.service.updateSizeRecommendation({
        where: params,
        data: data,
        select: {
          clothingItem: true,
          createdAt: true,
          id: true,
          recommendedSize: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SizeRecommendation })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSizeRecommendation(
    @common.Param() params: SizeRecommendationWhereUniqueInput
  ): Promise<SizeRecommendation | null> {
    try {
      return await this.service.deleteSizeRecommendation({
        where: params,
        select: {
          clothingItem: true,
          createdAt: true,
          id: true,
          recommendedSize: true,
          updatedAt: true,
          user: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/sizes/recommendation")
  @swagger.ApiOkResponse({
    type: SizeRecommendation,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FetchSizeRecommendation(
    @common.Body()
    body: string
  ): Promise<SizeRecommendation> {
    return this.service.FetchSizeRecommendation(body);
  }

  @common.Get("/:id/get-size-recommendation")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetSizeRecommendation(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetSizeRecommendation(body);
  }
}
