/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { PhotoUpload } from "./PhotoUpload";
import { PhotoUploadCountArgs } from "./PhotoUploadCountArgs";
import { PhotoUploadFindManyArgs } from "./PhotoUploadFindManyArgs";
import { PhotoUploadFindUniqueArgs } from "./PhotoUploadFindUniqueArgs";
import { CreatePhotoUploadArgs } from "./CreatePhotoUploadArgs";
import { UpdatePhotoUploadArgs } from "./UpdatePhotoUploadArgs";
import { DeletePhotoUploadArgs } from "./DeletePhotoUploadArgs";
import { User } from "../../user/base/User";
import { PhotoUploadService } from "../photoUpload.service";
@graphql.Resolver(() => PhotoUpload)
export class PhotoUploadResolverBase {
  constructor(protected readonly service: PhotoUploadService) {}

  async _photoUploadsMeta(
    @graphql.Args() args: PhotoUploadCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PhotoUpload])
  async photoUploads(
    @graphql.Args() args: PhotoUploadFindManyArgs
  ): Promise<PhotoUpload[]> {
    return this.service.photoUploads(args);
  }

  @graphql.Query(() => PhotoUpload, { nullable: true })
  async photoUpload(
    @graphql.Args() args: PhotoUploadFindUniqueArgs
  ): Promise<PhotoUpload | null> {
    const result = await this.service.photoUpload(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PhotoUpload)
  async createPhotoUpload(
    @graphql.Args() args: CreatePhotoUploadArgs
  ): Promise<PhotoUpload> {
    return await this.service.createPhotoUpload({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => PhotoUpload)
  async updatePhotoUpload(
    @graphql.Args() args: UpdatePhotoUploadArgs
  ): Promise<PhotoUpload | null> {
    try {
      return await this.service.updatePhotoUpload({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PhotoUpload)
  async deletePhotoUpload(
    @graphql.Args() args: DeletePhotoUploadArgs
  ): Promise<PhotoUpload | null> {
    try {
      return await this.service.deletePhotoUpload(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PhotoUpload)
  async uploadImageUrl(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: PhotoUploadFindUniqueArgs
  ): Promise<PhotoUpload> {
    return await this.service.uploadImageUrl(args, file);
  }

  @graphql.Mutation(() => PhotoUpload)
  async deleteImageUrl(
    @graphql.Args()
    args: PhotoUploadFindUniqueArgs
  ): Promise<PhotoUpload> {
    return await this.service.deleteImageUrl(args);
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: PhotoUpload): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
