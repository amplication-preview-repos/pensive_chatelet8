/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PhotoUpload as PrismaPhotoUpload,
  User as PrismaUser,
} from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class PhotoUploadServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.PhotoUploadCountArgs, "select">
  ): Promise<number> {
    return this.prisma.photoUpload.count(args);
  }

  async photoUploads(
    args: Prisma.PhotoUploadFindManyArgs
  ): Promise<PrismaPhotoUpload[]> {
    return this.prisma.photoUpload.findMany(args);
  }
  async photoUpload(
    args: Prisma.PhotoUploadFindUniqueArgs
  ): Promise<PrismaPhotoUpload | null> {
    return this.prisma.photoUpload.findUnique(args);
  }
  async createPhotoUpload(
    args: Prisma.PhotoUploadCreateArgs
  ): Promise<PrismaPhotoUpload> {
    return this.prisma.photoUpload.create(args);
  }
  async updatePhotoUpload(
    args: Prisma.PhotoUploadUpdateArgs
  ): Promise<PrismaPhotoUpload> {
    return this.prisma.photoUpload.update(args);
  }
  async deletePhotoUpload(
    args: Prisma.PhotoUploadDeleteArgs
  ): Promise<PrismaPhotoUpload> {
    return this.prisma.photoUpload.delete(args);
  }

  async uploadImageUrl<T extends Prisma.PhotoUploadFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PhotoUploadFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaPhotoUpload> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "imageUrl";
    const imageUrl = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.photoUpload.update({
      where: args.where,

      data: {
        imageUrl: imageUrl as InputJsonValue,
      },
    });
  }

  async downloadImageUrl<T extends Prisma.PhotoUploadFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PhotoUploadFindUniqueArgs>
  ): Promise<FileDownload> {
    const { imageUrl } = await this.prisma.photoUpload.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      imageUrl as unknown as LocalStorageFile
    );
  }

  async deleteImageUrl<T extends Prisma.PhotoUploadFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PhotoUploadFindUniqueArgs>
  ): Promise<PrismaPhotoUpload> {
    const { imageUrl } = await this.prisma.photoUpload.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      imageUrl as unknown as LocalStorageFile
    );

    return await this.prisma.photoUpload.update({
      where: args.where,

      data: {
        imageUrl: Prisma.DbNull,
      },
    });
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.photoUpload
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
