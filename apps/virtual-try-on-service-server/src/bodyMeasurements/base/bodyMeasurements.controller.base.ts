/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BodyMeasurementsService } from "../bodyMeasurements.service";
import { BodyMeasurementsCreateInput } from "./BodyMeasurementsCreateInput";
import { BodyMeasurements } from "./BodyMeasurements";
import { BodyMeasurementsFindManyArgs } from "./BodyMeasurementsFindManyArgs";
import { BodyMeasurementsWhereUniqueInput } from "./BodyMeasurementsWhereUniqueInput";
import { BodyMeasurementsUpdateInput } from "./BodyMeasurementsUpdateInput";

export class BodyMeasurementsControllerBase {
  constructor(protected readonly service: BodyMeasurementsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BodyMeasurements })
  async createBodyMeasurements(
    @common.Body() data: BodyMeasurementsCreateInput
  ): Promise<BodyMeasurements> {
    return await this.service.createBodyMeasurements({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        chest: true,
        createdAt: true,
        height: true,
        hips: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        waist: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BodyMeasurements] })
  @ApiNestedQuery(BodyMeasurementsFindManyArgs)
  async bodyMeasurementsItems(
    @common.Req() request: Request
  ): Promise<BodyMeasurements[]> {
    const args = plainToClass(BodyMeasurementsFindManyArgs, request.query);
    return this.service.bodyMeasurementsItems({
      ...args,
      select: {
        chest: true,
        createdAt: true,
        height: true,
        hips: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        waist: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BodyMeasurements })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bodyMeasurements(
    @common.Param() params: BodyMeasurementsWhereUniqueInput
  ): Promise<BodyMeasurements | null> {
    const result = await this.service.bodyMeasurements({
      where: params,
      select: {
        chest: true,
        createdAt: true,
        height: true,
        hips: true,
        id: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },

        waist: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BodyMeasurements })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBodyMeasurements(
    @common.Param() params: BodyMeasurementsWhereUniqueInput,
    @common.Body() data: BodyMeasurementsUpdateInput
  ): Promise<BodyMeasurements | null> {
    try {
      return await this.service.updateBodyMeasurements({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          chest: true,
          createdAt: true,
          height: true,
          hips: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          waist: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BodyMeasurements })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBodyMeasurements(
    @common.Param() params: BodyMeasurementsWhereUniqueInput
  ): Promise<BodyMeasurements | null> {
    try {
      return await this.service.deleteBodyMeasurements({
        where: params,
        select: {
          chest: true,
          createdAt: true,
          height: true,
          hips: true,
          id: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },

          waist: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
