/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  BodyMeasurements as PrismaBodyMeasurements,
  User as PrismaUser,
} from "@prisma/client";

export class BodyMeasurementsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BodyMeasurementsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.bodyMeasurements.count(args);
  }

  async bodyMeasurementsItems(
    args: Prisma.BodyMeasurementsFindManyArgs
  ): Promise<PrismaBodyMeasurements[]> {
    return this.prisma.bodyMeasurements.findMany(args);
  }
  async bodyMeasurements(
    args: Prisma.BodyMeasurementsFindUniqueArgs
  ): Promise<PrismaBodyMeasurements | null> {
    return this.prisma.bodyMeasurements.findUnique(args);
  }
  async createBodyMeasurements(
    args: Prisma.BodyMeasurementsCreateArgs
  ): Promise<PrismaBodyMeasurements> {
    return this.prisma.bodyMeasurements.create(args);
  }
  async updateBodyMeasurements(
    args: Prisma.BodyMeasurementsUpdateArgs
  ): Promise<PrismaBodyMeasurements> {
    return this.prisma.bodyMeasurements.update(args);
  }
  async deleteBodyMeasurements(
    args: Prisma.BodyMeasurementsDeleteArgs
  ): Promise<PrismaBodyMeasurements> {
    return this.prisma.bodyMeasurements.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.bodyMeasurements
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
