/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BodyMeasurements } from "./BodyMeasurements";
import { BodyMeasurementsCountArgs } from "./BodyMeasurementsCountArgs";
import { BodyMeasurementsFindManyArgs } from "./BodyMeasurementsFindManyArgs";
import { BodyMeasurementsFindUniqueArgs } from "./BodyMeasurementsFindUniqueArgs";
import { CreateBodyMeasurementsArgs } from "./CreateBodyMeasurementsArgs";
import { UpdateBodyMeasurementsArgs } from "./UpdateBodyMeasurementsArgs";
import { DeleteBodyMeasurementsArgs } from "./DeleteBodyMeasurementsArgs";
import { User } from "../../user/base/User";
import { BodyMeasurementsService } from "../bodyMeasurements.service";
@graphql.Resolver(() => BodyMeasurements)
export class BodyMeasurementsResolverBase {
  constructor(protected readonly service: BodyMeasurementsService) {}

  async _bodyMeasurementsItemsMeta(
    @graphql.Args() args: BodyMeasurementsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BodyMeasurements])
  async bodyMeasurementsItems(
    @graphql.Args() args: BodyMeasurementsFindManyArgs
  ): Promise<BodyMeasurements[]> {
    return this.service.bodyMeasurementsItems(args);
  }

  @graphql.Query(() => BodyMeasurements, { nullable: true })
  async bodyMeasurements(
    @graphql.Args() args: BodyMeasurementsFindUniqueArgs
  ): Promise<BodyMeasurements | null> {
    const result = await this.service.bodyMeasurements(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BodyMeasurements)
  async createBodyMeasurements(
    @graphql.Args() args: CreateBodyMeasurementsArgs
  ): Promise<BodyMeasurements> {
    return await this.service.createBodyMeasurements({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => BodyMeasurements)
  async updateBodyMeasurements(
    @graphql.Args() args: UpdateBodyMeasurementsArgs
  ): Promise<BodyMeasurements | null> {
    try {
      return await this.service.updateBodyMeasurements({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BodyMeasurements)
  async deleteBodyMeasurements(
    @graphql.Args() args: DeleteBodyMeasurementsArgs
  ): Promise<BodyMeasurements | null> {
    try {
      return await this.service.deleteBodyMeasurements(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: BodyMeasurements
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
