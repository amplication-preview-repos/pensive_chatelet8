/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ClothingItem as PrismaClothingItem } from "@prisma/client";
import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class ClothingItemServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.ClothingItemCountArgs, "select">
  ): Promise<number> {
    return this.prisma.clothingItem.count(args);
  }

  async clothingItems(
    args: Prisma.ClothingItemFindManyArgs
  ): Promise<PrismaClothingItem[]> {
    return this.prisma.clothingItem.findMany(args);
  }
  async clothingItem(
    args: Prisma.ClothingItemFindUniqueArgs
  ): Promise<PrismaClothingItem | null> {
    return this.prisma.clothingItem.findUnique(args);
  }
  async createClothingItem(
    args: Prisma.ClothingItemCreateArgs
  ): Promise<PrismaClothingItem> {
    return this.prisma.clothingItem.create(args);
  }
  async updateClothingItem(
    args: Prisma.ClothingItemUpdateArgs
  ): Promise<PrismaClothingItem> {
    return this.prisma.clothingItem.update(args);
  }
  async deleteClothingItem(
    args: Prisma.ClothingItemDeleteArgs
  ): Promise<PrismaClothingItem> {
    return this.prisma.clothingItem.delete(args);
  }

  async uploadImageUrl<T extends Prisma.ClothingItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClothingItemFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaClothingItem> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "imageUrl";
    const imageUrl = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.clothingItem.update({
      where: args.where,

      data: {
        imageUrl: imageUrl as InputJsonValue,
      },
    });
  }

  async downloadImageUrl<T extends Prisma.ClothingItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClothingItemFindUniqueArgs>
  ): Promise<FileDownload> {
    const { imageUrl } = await this.prisma.clothingItem.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      imageUrl as unknown as LocalStorageFile
    );
  }

  async deleteImageUrl<T extends Prisma.ClothingItemFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ClothingItemFindUniqueArgs>
  ): Promise<PrismaClothingItem> {
    const { imageUrl } = await this.prisma.clothingItem.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      imageUrl as unknown as LocalStorageFile
    );

    return await this.prisma.clothingItem.update({
      where: args.where,

      data: {
        imageUrl: Prisma.DbNull,
      },
    });
  }
}
