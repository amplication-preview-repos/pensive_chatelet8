/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request, Response } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FileInterceptor } from "@nestjs/platform-express";
import { ClothingItemService } from "../clothingItem.service";
import { ClothingItemCreateInput } from "./ClothingItemCreateInput";
import { ClothingItem } from "./ClothingItem";
import { ClothingItemFindManyArgs } from "./ClothingItemFindManyArgs";
import { ClothingItemWhereUniqueInput } from "./ClothingItemWhereUniqueInput";
import { ClothingItemUpdateInput } from "./ClothingItemUpdateInput";

export class ClothingItemControllerBase {
  constructor(protected readonly service: ClothingItemService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ClothingItem })
  async createClothingItem(
    @common.Body() data: ClothingItemCreateInput
  ): Promise<ClothingItem> {
    return await this.service.createClothingItem({
      data: data,
      select: {
        brand: true,
        createdAt: true,
        id: true,
        imageUrl: true,
        name: true,
        sizeInfo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ClothingItem] })
  @ApiNestedQuery(ClothingItemFindManyArgs)
  async clothingItems(@common.Req() request: Request): Promise<ClothingItem[]> {
    const args = plainToClass(ClothingItemFindManyArgs, request.query);
    return this.service.clothingItems({
      ...args,
      select: {
        brand: true,
        createdAt: true,
        id: true,
        imageUrl: true,
        name: true,
        sizeInfo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ClothingItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async clothingItem(
    @common.Param() params: ClothingItemWhereUniqueInput
  ): Promise<ClothingItem | null> {
    const result = await this.service.clothingItem({
      where: params,
      select: {
        brand: true,
        createdAt: true,
        id: true,
        imageUrl: true,
        name: true,
        sizeInfo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ClothingItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateClothingItem(
    @common.Param() params: ClothingItemWhereUniqueInput,
    @common.Body() data: ClothingItemUpdateInput
  ): Promise<ClothingItem | null> {
    try {
      return await this.service.updateClothingItem({
        where: params,
        data: data,
        select: {
          brand: true,
          createdAt: true,
          id: true,
          imageUrl: true,
          name: true,
          sizeInfo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ClothingItem })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteClothingItem(
    @common.Param() params: ClothingItemWhereUniqueInput
  ): Promise<ClothingItem | null> {
    try {
      return await this.service.deleteClothingItem({
        where: params,
        select: {
          brand: true,
          createdAt: true,
          id: true,
          imageUrl: true,
          name: true,
          sizeInfo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Put(":id/imageUrl")
  @common.UseInterceptors(FileInterceptor("file"))
  @swagger.ApiConsumes("multipart/form-data")
  @swagger.ApiBody({
    schema: {
      type: "object",

      properties: {
        file: {
          type: "string",
          format: "binary",
        },
      },
    },
  })
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiCreatedResponse({
    type: ClothingItem,
    status: "2XX",
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async uploadImageUrl(
    @common.Param()
    params: ClothingItemWhereUniqueInput,
    @common.UploadedFile()
    file: Express.Multer.File
  ): Promise<ClothingItem> {
    return this.service.uploadImageUrl(
      {
        where: params,
      },
      Object.assign(file, {
        filename: file.originalname,
      })
    );
  }

  @common.Get(":id/imageUrl")
  @swagger.ApiParam({
    name: "id",
    type: "string",
    required: true,
  })
  @swagger.ApiOkResponse({
    type: common.StreamableFile,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async downloadImageUrl(
    @common.Param()
    params: ClothingItemWhereUniqueInput,
    @common.Res({
      passthrough: true,
    })
    res: Response
  ): Promise<common.StreamableFile> {
    const result = await this.service.downloadImageUrl({
      where: params,
    });

    if (result === null) {
      throw new errors.NotFoundException(
        "No resource was found for ",
        JSON.stringify(params)
      );
    }

    res.setHeader(
      "Content-Disposition",
      `attachment; filename=${result.filename}`
    );
    res.setHeader("Content-Type", result.mimetype);
    return result.stream;
  }

  @common.Delete(":id/imageUrl")
  @swagger.ApiOkResponse({
    type: ClothingItem,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  async deleteImageUrl(
    @common.Param()
    params: ClothingItemWhereUniqueInput
  ): Promise<ClothingItem> {
    return this.service.deleteImageUrl({
      where: params,
    });
  }
}
